(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return g}));var a=n(0),c=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var p=c.a.createContext({}),b=function(e){var t=c.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=b(e.components);return c.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,g=s["".concat(i,".").concat(d)]||s[d]||u[d]||r;return n?c.a.createElement(g,o(o({ref:t},p),{},{components:n})):c.a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return c.a.createElement.apply(null,i)}return c.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),c=n(6),r=(n(0),n(101)),i={id:"configpackage",title:"Config Package"},o={unversionedId:"kd-img-dev/configpackage",id:"kd-img-dev/configpackage",isDocsHomePage:!1,title:"Config Package",description:"Explore an existing config package",source:"@site/docs/kd-img-dev/configpackage.md",slug:"/kd-img-dev/configpackage",permalink:"/learn-kubedirector/docs/kd-img-dev/configpackage",editUrl:"https://github.com/hpe-container-platform-community/learn-kubedirector/edit/master/docs/kd-img-dev/configpackage.md",version:"current",sidebar:"someSidebar",previous:{title:"Custom Docker Images",permalink:"/learn-kubedirector/docs/kd-img-dev/customdockerimage"},next:{title:"More coming soon",permalink:"/learn-kubedirector/docs/kd-img-dev/more"}},l=[{value:"Explore an existing config package",id:"explore-an-existing-config-package",children:[]},{value:"Create a basic config package",id:"create-a-basic-config-package",children:[]},{value:"Run a local registry",id:"run-a-local-registry",children:[]},{value:"Build and Push image",id:"build-and-push-image",children:[]},{value:"Update the KD app image",id:"update-the-kd-app-image",children:[]},{value:"Deploy the KD app image",id:"deploy-the-kd-app-image",children:[]},{value:"Deploy the KD Cluster",id:"deploy-the-kd-cluster",children:[]},{value:"Reference",id:"reference",children:[]}],p={rightToc:l};function b(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"explore-an-existing-config-package"},"Explore an existing config package"),Object(r.b)("p",null,"To learn about config package, let's explore an application that has ",Object(r.b)("inlineCode",{parentName:"p"},"defaultConfigPackage")," defined."),Object(r.b)("p",null,"Open the file: ",Object(r.b)("inlineCode",{parentName:"p"},"deploy/example_catalog/cr-app-kafka55.json")," inside this file we see:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{   ...\n    "defaultImageRepoTag": "bluedata/bluedata/kafka:1.0",\n    "defaultConfigPackage": {\n      "packageURL": "file:///opt/configscripts/appconfig.tgz"\n    }\n    ...\n}\n')),Object(r.b)("p",null,"So the ",Object(r.b)("inlineCode",{parentName:"p"},"appconfig")," is embedded in the image in ",Object(r.b)("inlineCode",{parentName:"p"},"/opt/configscripts/"),".  "),Object(r.b)("p",null,"Let's explore that.  We can see the image tag is ",Object(r.b)("inlineCode",{parentName:"p"},"bluedata/kafka:1.0")," - download it to your local environment:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker pull bluedata/kafka:1.0 # This will take a while as it is several GB!!\n")),Object(r.b)("p",null,"Now start the container and login:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ docker run --rm -it bluedata/kafka:1.0 /bin/bash\n[root@a6658abcf6f3 /]# cd /root\n[root@a6658abcf6f3 ~]# tar xvzf /opt/configscripts/appconfig.tgz\n._appconfig\nappconfig/\nappconfig/utils.sh\nappconfig/limits.conf\nappconfig/start_services.py\nappconfig/logging.sh\nappconfig/nsswitch.conf\nappconfig/._templates\nappconfig/templates/\nappconfig/startscript\nappconfig/templates/._Kafka_Zookeeper\nappconfig/templates/Kafka_Zookeeper/\n...\n")),Object(r.b)("p",null,"The file ",Object(r.b)("inlineCode",{parentName:"p"},"appconfig/startscript")," looks interesting - let's take a closer look.  "),Object(r.b)("p",null,"The startscript begins with:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'#!/bin/env bash\n### Error for wrong option handled ###\nif [[ "$1" == "--addnodes" ]] || [[ "$1" == "--delnodes" ]] || [[ "$1" == "--configure" ]]; then\n  echo "Valid values. So execute the later code"\nelse\n  echo "ERROR: Unknown command line option(s): \'$@\'"\n  exit 10\nfi\n...\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"startscript")," is a bash shell script.  When a bash shell script is executed command line arguments\nare passed to the script are passed in the variables ",Object(r.b)("inlineCode",{parentName:"p"},"$1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"$2"),", etc."),Object(r.b)("p",null,"This script is executed by KubeDirector.  It is executed for events in a KubeDirector virtual cluster lifecycle, e.g."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--configure")," when an virtual cluster is initially created (TODO is this correct?)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--addnodes")," when an node is added to the virtual cluster"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--delnodes")," when a node is removed from the virtual cluster")),Object(r.b)("h2",{id:"create-a-basic-config-package"},"Create a basic config package"),Object(r.b)("p",null,"In this section we modify the ubuntu application to log the action inside the container."),Object(r.b)("p",null,"In the folder you created for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/kd-img-dev/customdockerimage"}),"previous lession")," - ",Object(r.b)("inlineCode",{parentName:"p"},"/deploy/example_catalog/myubuntu"),"\ncreate another directory ",Object(r.b)("inlineCode",{parentName:"p"},"appconfig")," and inside that folder, create a new file named ",Object(r.b)("inlineCode",{parentName:"p"},"startscript")," with the contents:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'#!/bin/env bash\n### Error for wrong option handled ###\nif [[ "$1" == "--addnodes" ]] || [[ "$1" == "--delnodes" ]] || [[ "$1" == "--configure" ]]; then\n  echo "Valid values. So execute the later code"\nelse\n  echo "ERROR: Unknown command line option(s): \'$@\'"\n  exit 10\nfi\n\necho "$1" >> /root/startscript.log\n')),Object(r.b)("p",null,"Open a terminal and change into the folder ",Object(r.b)("inlineCode",{parentName:"p"},"/deploy/example_catalog/myubuntu"),"."),Object(r.b)("p",null,"Create a tar file with the appconfig:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"tar cvzf appconfig.tgz appconfig/\n")),Object(r.b)("p",null,"Update the Dockerfile so that it now contains:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Dockerfile"}),"FROM bluedata/ubuntu18.04:1.1\n\nRUN ! test -d /opt/configscripts || mkdir /opt/configscripts/\n\nCOPY appconfig.tgz /opt/configscripts/\n")),Object(r.b)("h2",{id:"run-a-local-registry"},"Run a local registry"),Object(r.b)("p",null,"Check local docker registry is running:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker ps -f name=registry:2\n")),Object(r.b)("p",null,"If it is not running, start it with:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker run -d -p 5000:5000 --restart=always --name registry registry:2\n")),Object(r.b)("h2",{id:"build-and-push-image"},"Build and Push image"),Object(r.b)("p",null,"In the terminal, change to the ",Object(r.b)("inlineCode",{parentName:"p"},"myubuntu")," folder and build your custom image and push it to the local registry:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker build --tag myubuntu:1.0 .\n\ndocker tag myubuntu:1.0 localhost:5000/myubuntu:1.0\n")),Object(r.b)("p",null,"Next we push the image to our local registry:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker push localhost:5000/myubuntu:1.0\n")),Object(r.b)("h2",{id:"update-the-kd-app-image"},"Update the KD app image"),Object(r.b)("p",null,"Ensure ",Object(r.b)("inlineCode",{parentName:"p"},"defaultConfigPackage")," in the file ",Object(r.b)("inlineCode",{parentName:"p"},"deploy/example_catalog/cr-app-ubuntu18.04.json")," is set to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    ...\n    "defaultConfigPackage":  {\n        "packageURL": "file:///opt/configscripts/appconfig.tgz"\n    },\n    ...\n}\n')),Object(r.b)("h2",{id:"deploy-the-kd-app-image"},"Deploy the KD app image"),Object(r.b)("p",null,"First ensure you aren't still running an Ubuntu KD clusters from the previous tutorial."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"kubectl delete -f ../../example_clusters/cr-cluster-ubuntu18.04-stor.yaml\n")),Object(r.b)("p",null,"Next undeploy the existing Ubuntu KD application image definition:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"kubectl delete -f ../cr-app-ubuntu18.04.json\n")),Object(r.b)("p",null,"Deploy the new Ubuntu KD application with your changes:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"kubectl apply -f ../cr-app-ubuntu18.04.json\n")),Object(r.b)("p",null,"Check the deployement was successful:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"kubectl get kubedirectorapps.kubedirector.hpe.com\n")),Object(r.b)("p",null,"You can see my image has only just been deployed:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"NAME                     AGE\n...\ntensorflow-gpu-jupyter   18h\ntraining-engine          18h\nubuntu18x                5s\n")),Object(r.b)("h2",{id:"deploy-the-kd-cluster"},"Deploy the KD Cluster"),Object(r.b)("p",null,"Next we can deploy the KD Cluster:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"kubectl apply -f ../../example_clusters/cr-cluster-ubuntu18.04-stor.yaml\n")),Object(r.b)("p",null,"You should see a new pod:"),Object(r.b)("p",null,"``bash\n$ kubectl get pods\nNAME                            READY   STATUS    RESTARTS   AGE\nkdss-kzbwq-0                    1/1     Running   0          105s\nkubedirector-7f9d95c9d5-wjm2j   1/1     Running   0          47h"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"\nWe can then run `ls /` inside the cluster to see the file we created in our Docker image `modified_by_yourname`:\n\n```bash\n$ kubectl exec -it kdss-kzbwq-0 -- /bin/bash\nroot@kdss-w6jj7-0:/# ls /\nbin  boot  dev  etc  home  lib  lib64  media  mnt  modified_by_yourname  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n")),Object(r.b)("h2",{id:"reference"},"Reference"),Object(r.b)("p",null,"More content coming soon ..."),Object(r.b)("hr",null),Object(r.b)("p",null,"More content coming soon ..."),Object(r.b)("p",null,"Waiting for information here: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/bluek8s/kubedirector/issues/412"}),"https://github.com/bluek8s/kubedirector/issues/412")))}b.isMDXComponent=!0}}]);